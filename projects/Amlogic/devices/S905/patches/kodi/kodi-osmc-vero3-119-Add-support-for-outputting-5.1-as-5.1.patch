From 00a4206e55cef01ecea3fedc6006c58b36d421b0 Mon Sep 17 00:00:00 2001
From: Sam Nazarko <email@samnazarko.co.uk>
Date: Tue, 27 Feb 2018 19:17:58 +0000
Subject: [PATCH] Add support for outputting formats in their proper container
 format. When ALSA sink can't be opened in this mode, we mask channels via
 HDMI TX instead.

Signed-off-by: Sam Nazarko <email@samnazarko.co.uk>
---
 xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp | 61 ++++++++++++++++++++++++++---
 1 file changed, 55 insertions(+), 6 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
index 7dc6713..d216439 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
@@ -23,6 +23,8 @@
 #include "utils/MathUtils.h"
 #include "utils/SystemInfo.h"
 #include "threads/SingleLock.h"
+#include "settings/Settings.h"
+#include "ServiceBroker.h"
 #include "settings/AdvancedSettings.h"
 #include "settings/SettingsComponent.h"
 #if defined(HAS_LIBAMCODEC)
@@ -74,6 +76,8 @@ static unsigned int ALSASampleRateList[] =
   0
 };
 
+int speaker_layout = 0;
+
 CAESinkALSA::CAESinkALSA() :
   m_pcm(NULL)
 {
@@ -219,9 +223,10 @@ inline CAEChannelInfo CAESinkALSA::GetChannelLayout(const AEAudioFormat& format,
     }
   }
 
+
   CLog::Log(LOGDEBUG, "CAESinkALSA::GetChannelLayout - Input Channel Count: %d Output Channel Count: %d", format.m_channelLayout.Count(), info.Count());
   CLog::Log(LOGDEBUG, "CAESinkALSA::GetChannelLayout - Requested Layout: %s", std::string(format.m_channelLayout).c_str());
-  CLog::Log(LOGDEBUG, "CAESinkALSA::GetChannelLayout - Got Layout: %s (ALSA: %s)", std::string(info).c_str(), alsaMapStr.c_str());
+  CLog::Log(LOGDEBUG, "CAESinkALSA::GetChannelLayout - Got Layout: %s (ALSA: %s) (CEA: %d)", std::string(info).c_str(), alsaMapStr.c_str(), speaker_layout);
 
   return info;
 }
@@ -485,6 +490,8 @@ bool CAESinkALSA::Initialize(AEAudioFormat &format, std::string &device)
   inconfig.format = format.m_dataFormat;
   inconfig.sampleRate = format.m_sampleRate;
 
+    CLog::Log(LOGINFO, "CAESinkALSA::Initialize - Requested layout: %s", std::string(format.m_channelLayout).c_str());
+
   /*
    * We can't use the better GetChannelLayout() at this point as the device
    * is not opened yet, and we need inconfig.channels to select the correct
@@ -504,8 +511,6 @@ bool CAESinkALSA::Initialize(AEAudioFormat &format, std::string &device)
     m_passthrough   = false;
   }
 
-  if (device.find("M8AUDIO") != std::string::npos)
-  {
     int aml_digital_codec = 0;
 
     if (m_passthrough)
@@ -546,7 +551,7 @@ bool CAESinkALSA::Initialize(AEAudioFormat &format, std::string &device)
 
     aml_set_audio_passthrough(m_passthrough);
     SysfsUtils::SetInt("/sys/class/audiodsp/digital_codec", aml_digital_codec);
-  }
+    CLog::Log(LOGINFO, "CAESinkALSA::Initialize - set digital_codec %d", aml_digital_codec);
 
   if (inconfig.channels == 0)
   {
@@ -554,7 +559,16 @@ bool CAESinkALSA::Initialize(AEAudioFormat &format, std::string &device)
     return false;
   }
 
-  AEDeviceType devType = AEDeviceTypeFromName(device);
+ if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOSCREEN_MUTEHDMI)) {
+    CLog::Log(LOGDEBUG, "CAESinkALSA::Initialize -- muting HDMI");
+    SysfsUtils::SetString("/sys/class/amhdmitx/amhdmitx0/config", "audio_off");
+ }
+ else {
+    CLog::Log(LOGDEBUG, "CAESinkALSA::Initialize -- unmuting HDMI");
+    SysfsUtils::SetString("/sys/class/amhdmitx/amhdmitx0/config", "audio_on");
+ }
+
+ AEDeviceType devType = AEDeviceTypeFromName(device);
 
   std::string AESParams;
   /* digital interfaces should have AESx set, though in practice most
@@ -603,10 +617,45 @@ bool CAESinkALSA::Initialize(AEAudioFormat &format, std::string &device)
 
   if (selectedChmap)
   {
+	  /* Channel layout should match one of those offered by the sink
+	   * Find out which one it is
+	   */
+
+	  snd_pcm_chmap_query_t** supportedMaps;
+	  supportedMaps = snd_pcm_query_chmaps(m_pcm);
+	  /* set default stereo */
+      SysfsUtils::SetInt("/sys/class/amhdmitx/amhdmitx0/aud_ch", 0);
+      int i = 0;
+	  for (snd_pcm_chmap_query_t* supportedMap = supportedMaps[i++];
+			  supportedMap; supportedMap = supportedMaps[i++])
+	  {
+		  if (ALSAchmapToString(&supportedMap->map) == ALSAchmapToString(selectedChmap)) {
+			  speaker_layout = --i;
+			  SysfsUtils::SetInt("/sys/class/amhdmitx/amhdmitx0/aud_ch", speaker_layout);
+			  break;
+		  }
+	  }
+
     /* failure is OK, that likely just means the selected chmap is fixed already */
     snd_pcm_set_chmap(m_pcm, selectedChmap);
     free(selectedChmap);
   }
+  else
+  {
+	  /* while i2s driver is broken, this is essential */
+	  if (outconfig.channels == 2 || m_passthrough)
+	  {
+		  SysfsUtils::SetInt("/sys/class/amhdmitx/amhdmitx0/aud_ch", 0);
+  		CLog::Log(LOGINFO, "CAESinkALSA::Initialize - setting default aud_ch to 0");
+	  }
+	  else
+	  {
+		SysfsUtils::SetInt("/sys/class/amhdmitx/amhdmitx0/aud_ch", 19);
+   		CLog::Log(LOGINFO, "CAESinkALSA::Initialize - setting default aud_ch to 19");
+	  }
+
+  }
+
 
   // we want it blocking
   snd_pcm_nonblock(m_pcm, 0);
@@ -899,7 +948,7 @@ void CAESinkALSA::Stop()
 {
   if (!m_pcm)
     return;
-  snd_pcm_drop(m_pcm);
+  snd_pcm_drain(m_pcm);
 }
 
 void CAESinkALSA::GetDelay(AEDelayStatus& status)
-- 
2.7.4

